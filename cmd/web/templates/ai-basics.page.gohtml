{{template "base" .}}

{{define "title"}}
Home Page
{{end}}

{{define "content"}}
<div class="container  mx-auto p-10">

    <h2 class="font-bold text-xl">Nem informált keresés</h2>
    <p>
        A nem informált (vaknak is nevezett) keresés azt jelenti, hogy ezen stratégiáknak semmilyen
        információjuk nincs az állapotokról a probléma definíciójában megadott információn kívül. Működésük során
        mást nem tehetnek, mint a következő állapotok generálása és a célállapot megkülönböztetése a nem
        célállapottól.
    </p>
    <ul class="list-disc mt-2 pl-4">
        <li>Teljesség (completeness): az algoritmus garantáltan megtalál egy megoldást, amennyiben létezik megoldás?
        </li>
        <li>Optimalitás (optimality): a stratégia megtalálja az optimális megoldást?</li>
        <li>Időigény (time complexity): mennyi ideig tart egy megoldás megtalálása?</li>
        <li>Tárigény (space complexity): a keresés elvégzéséhez mennyi memóriára van szükség?</li>
    </ul>
    <p class="mt-2">Az MI-ben,
        ahol a gráfot implicit formában a kezdeti állapottal és az állapotátmenet-függvénnyel reprezentáljuk, és ahol a
        gráf sokszor végtelen, a komplexitást három tényezővel fejezzük ki. Ezek: <span class="font-bold">b – az
            elágazási tényező (branching
            factor)</span>, vagyis a követők maximális száma minden csomópontban, <span class="font-bold">d – a
            legsekélyebb célállapot mélysége</span> és <span class="font-bold">m
            – az állapottérben található utak maximális hossza.</span></p> <br>
    Az időt gyakran a keresés közben generált csomópontok számával, a tárat pedig a memóriában maximálisan
    tárolt csomópontok számával mérik.</p>
    <p class="mt-2">Ide tartozó keresési stratégiák:</p>
    <ul class="list-disc pl-4">
        <li>Szélességi keresés</li>
        <li>Mélységi keresés</li>
    </ul>

    {{template "bfs"}}

    {{template "dfs"}}

    {{template "dls"}}
    

</div>
{{end}}


{{define "js"}}
    <script>
        function drawCircle(ctx, x, y, radius, color, text) {
            ctx.beginPath();
            ctx.arc(x, y, radius, 0, 2 * Math.PI);
            ctx.fillStyle = color;
            ctx.fill();

            ctx.font = "18px Arial";
            ctx.fillStyle = "white";
            ctx.textAlign = "center";
            ctx.textBaseline = "middle";
            ctx.fillText(text, x, y);
        }

        function drawLine(ctx, x1, y1, x2, y2, color) {
            ctx.beginPath();
            ctx.strokeStyle = color;
            ctx.moveTo(x1, y1);
            ctx.lineTo(x2, y2);
            ctx.stroke();
        }
    </script>
    {{block "bfsjs" .}} {{end}}
    {{block "dfsjs" .}} {{end}}
    {{block "dlsjs" .}} {{end}}
{{end}}